version: '3.8'

services:
  # Main Jira MCP Server
  jira-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jira-mcp-server
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - JIRA_URL=${JIRA_URL}
      - JIRA_EMAIL=${JIRA_EMAIL}
      - JIRA_API_TOKEN=${JIRA_API_TOKEN}
      - ENABLE_CACHING=true
      - CACHE_TTL=300000
      - MAX_CONCURRENT=10
      - REQUEST_TIMEOUT=10000
      - LOG_LEVEL=info
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - jira-mcp-network
    healthcheck:
      test: ["/usr/local/bin/docker-healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis for caching (optional but recommended for production)
  redis:
    image: redis:7-alpine
    container_name: jira-mcp-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis-data:/data
    networks:
      - jira-mcp-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: jira-mcp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - jira-mcp-network

  # Grafana for dashboard visualization
  grafana:
    image: grafana/grafana:latest
    container_name: jira-mcp-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - jira-mcp-network
    depends_on:
      - prometheus

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: jira-mcp-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - jira-mcp-network

  # Log aggregator (optional)
  fluentd:
    image: fluent/fluentd:v1.16.2-debian-1.0
    container_name: jira-mcp-fluentd
    restart: unless-stopped
    volumes:
      - ./monitoring/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/jira-mcp:ro
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - jira-mcp-network

networks:
  jira-mcp-network:
    driver: bridge
    name: jira-mcp-network

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Health check for the entire stack
x-healthcheck-common: &healthcheck-common
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s
